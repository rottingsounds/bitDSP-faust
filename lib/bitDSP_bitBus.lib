declare name "bitDSP_binBus";
declare author "LFSaw (Till Bovermann), Dario Sanfilippo";
declare copyright "MIT";

// bit = library("bitDSP"); // main library
// bit32 = library("bitDSP_int32"); // int32-based library
// bitBus = library("bitDSP_bitBus"); // int32-based library
bitConv = library("bitDSP_conversion.lib"); // conversion between formats library

// sc = library("scUGens.lib"); // part of https://github.com/tai-studio/faust-sc
// lf = library("taiStudio.lib"); // part of https://github.com/tai-studio/faust-sc

// import("stdfaust.lib");
// only import what is necessary
// 
// an = library("analyzers.lib");
ba = library("basics.lib");
// co = library("compressors.lib");
de = library("delays.lib");
// dm = library("demos.lib");
// dx = library("dx7.lib");
// en = library("envelopes.lib");
// fi = library("filters.lib");
// ho = library("hoa.lib");
// it = library("interpolators.lib");
ma = library("maths.lib");
// mi = library("mi.lib");
// ef = library("misceffects.lib");
// os = library("oscillators.lib");
// no = library("noises.lib");
// pf = library("phaflangers.lib");
// pl = library("platform.lib");
// pm = library("physmodels.lib");
// rm = library("reducemaps.lib");
// re = library("reverbs.lib");
ro = library("routes.lib");
// sp = library("spats.lib");
si = library("signals.lib");
// so = library("soundfiles.lib");
// sy = library("synths.lib");
// ve = library("vaeffects.lib");
// wa = library("webaudio.lib");
// sf = library("all.lib");
// vl = library("version.lib");

// eca(L, R, I, rate[n]); ------------------------------------------------------
//
// (author: Dario Sanfilipo) 
//
// One-dimension, two-state, elementary cellular automata with circular
// lattice. The function is defined by the length of the lattice, a rule, and
// an initial condition. Additionally, the function has a "rate" parameter
// that determines the interval between iterations. The rule and the initial
// condition are positive INTs that are converted into binary numbers and
// accordingly zero-padded or limited to reach a binary string of
// appropriate length.
//
// Ref:
//    Wolfram, S. (1984). Cellular automata as models of complexity. Nature,
//    311(5985), 419-424.
//
//    Wolfram, S. (2018). Cellular automata and complexity: collected papers.
//    CRC Press.
//
// 1 inputs:
//    rate[n], iteration rate.
//
// L outputs:
//    y1[n];
//    y2[n];
//    ...;
//    yL[n], states of the cells in the lattice.
//
// 3 compile-time arguments:
//    L, (positive INT) size of the lattice (number of cells);
//    R, (positive INT up to 255) rule applied to the 8 possible cases;
//    I, (positive INT) initial condition for the cells.
//
// Sample-and-hold circuits are deployed to have arbitrary iteration
// rates.
eca(L, R, I, rate) =   (   si.bus(L) ,
                           init(I) : ro.interleave(L, 2) : par(i, L, +) :
      iterate : par(i, L, ba.sAndH(trigger)))
                       ~ si.bus(L)
      with {
           // The trigger function needs further testing for extremely
           // low iteration rates.
           trigger = ba.period(ma.SR / max(ma.EPSILON, rate)) == 0;
           // Integer wrap-around function assuming a range between 0 and any
           // positive int value M.
           wrap(M, N) = int(ma.frac(N / M) * M);
           // "Wolfram Number" â€“ an int between 0 and 255 representing
           // all 256 possible outcomes for the eight cases (see below).
           // Eight total cases and two possible outcomes for each case,
           // hence 2^8 rules. Rule 30 and 110 are well-known.
           w_num = zeropad_up(int(8 - ceil(ma.log2(R1))), bitConv.dec2bitBus(R1))
               with {
                   R1 = min(255, R);
               };
           // Initial value for the cells, also expressed as an int. If
           // the binary value of the init is larger than the lattice,
           // the value is clipped. If smaller, 0s are added at the top
           // until the binary string matches the lattice length.
           init(N) = zeropad_up(int(L - (floor(ma.log2(N1)) + 1)), 
               bitConv.dec2bitBus(N1)) : par(i, L, _ <: _ - mem)
               with {
                   N1 = min(N, 2 ^ L - 1);
               };
           // Rule application through nested IFs. The rule changes the
           // state of a cell according to the state of its neighbouring
           // cells. Note that this is a circular latice, hence the
           // state of the first cell is determined by the second one and
           // the last one.
           rule(x1, x2, x3) =
      ba.if(   c1, w_num : route(8, 1, 1, 1),
           ba.if(  c2, w_num : route(8, 1, 2, 1),
               ba.if(  c3, w_num : route(8, 1, 3, 1),
                   ba.if(  c4, w_num : route(8, 1, 4, 1),
                       ba.if(  c5, w_num : route(8, 1, 5, 1),
                           ba.if(  c6, w_num : route(8, 1, 6, 1),
                               ba.if(  c7, w_num : route(8, 1, 7, 1),
                                   w_num : route(8, 1, 8, 1))))))))
               // Two states for three cells, hence 2^3 conditions.
               // Note that the last one is implicit and not used in
               // the IFs above, although it is informative having it
               // here.
               with {
                   c1 = (x1 == 1) & (x2 == 1) & (x3 == 1);
                   c2 = (x1 == 1) & (x2 == 1) & (x3 == 0);
                   c3 = (x1 == 1) & (x2 == 0) & (x3 == 1);
                   c4 = (x1 == 1) & (x2 == 0) & (x3 == 0);
                   c5 = (x1 == 0) & (x2 == 1) & (x3 == 1);
                   c6 = (x1 == 0) & (x2 == 1) & (x3 == 0);
                   c7 = (x1 == 0) & (x2 == 0) & (x3 == 1);
                   c8 = (x1 == 0) & (x2 == 0) & (x3 == 0);
               };
           iterate = si.bus(L) <:
               par(i, L, route(L, 3,   wrap(L, i - 1) + 1, 1,
                                       i + 1, 2,
                                       wrap(L, i + 1) + 1, 3) : int(rule));
      };
// -----------------------------------------------------------------------------

// zeropad_up(N, list); --------------------------------------------------------
//
// (author: Dario Sanfilipo) 
//
// This function adds N zeros at the beginning of a list.
//
// 0 inputs.
//
// N+ba.count(list) outputs.
//
// 1 compile-time arguments:
//    N, number of zeros to be added.
//
zeropad_up(0, x) = x;
zeropad_up(N, x) = par(i, N, 0) , x;
// -----------------------------------------------------------------------------
